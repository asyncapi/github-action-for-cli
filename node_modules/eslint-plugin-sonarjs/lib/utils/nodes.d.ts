import { Rule } from "eslint";
import * as estree from "estree";
export declare function getParent(context: Rule.RuleContext): estree.Identifier | estree.SimpleLiteral | estree.RegExpLiteral | estree.Program | estree.FunctionDeclaration | estree.FunctionExpression | estree.ArrowFunctionExpression | estree.SwitchCase | estree.CatchClause | estree.VariableDeclarator | estree.ExpressionStatement | estree.BlockStatement | estree.EmptyStatement | estree.DebuggerStatement | estree.WithStatement | estree.ReturnStatement | estree.LabeledStatement | estree.BreakStatement | estree.ContinueStatement | estree.IfStatement | estree.SwitchStatement | estree.ThrowStatement | estree.TryStatement | estree.WhileStatement | estree.DoWhileStatement | estree.ForStatement | estree.ForInStatement | estree.ForOfStatement | estree.VariableDeclaration | estree.ClassDeclaration | estree.ThisExpression | estree.ArrayExpression | estree.ObjectExpression | estree.YieldExpression | estree.UnaryExpression | estree.UpdateExpression | estree.BinaryExpression | estree.AssignmentExpression | estree.LogicalExpression | estree.MemberExpression | estree.ConditionalExpression | estree.SimpleCallExpression | estree.NewExpression | estree.SequenceExpression | estree.TemplateLiteral | estree.TaggedTemplateExpression | estree.ClassExpression | estree.MetaProperty | estree.AwaitExpression | estree.Property | estree.Super | estree.TemplateElement | estree.SpreadElement | estree.ObjectPattern | estree.ArrayPattern | estree.RestElement | estree.AssignmentPattern | estree.ClassBody | estree.MethodDefinition | estree.ImportDeclaration | estree.ExportNamedDeclaration | estree.ExportDefaultDeclaration | estree.ExportAllDeclaration | estree.ImportSpecifier | estree.ImportDefaultSpecifier | estree.ImportNamespaceSpecifier | estree.ExportSpecifier | undefined;
export declare function isArrowFunctionExpression(node: estree.Node | undefined): node is estree.ArrowFunctionExpression;
export declare function isAssignmentExpression(node: estree.Node | undefined): node is estree.AssignmentExpression;
export declare function isBinaryExpression(node: estree.Node | undefined): node is estree.BinaryExpression;
export declare function isBlockStatement(node: estree.Node | undefined): node is estree.BlockStatement;
export declare function isBooleanLiteral(node: estree.Node | undefined): node is estree.Literal;
export declare function isCallExpression(node: estree.Node | undefined): node is estree.CallExpression;
export declare function isConditionalExpression(node: estree.Node | undefined): node is estree.ConditionalExpression;
export declare function isContinueStatement(node: estree.Node | undefined): node is estree.ContinueStatement;
export declare function isExpressionStatement(node: estree.Node | undefined): node is estree.ExpressionStatement;
export declare function isFunctionDeclaration(node: estree.Node | undefined): node is estree.FunctionDeclaration;
export declare function isFunctionExpression(node: estree.Node | undefined): node is estree.FunctionExpression;
export declare function isIdentifier(node: estree.Node | undefined): node is estree.Identifier;
export declare function isIfStatement(node: estree.Node | undefined): node is estree.IfStatement;
export declare function isLiteral(node: estree.Node | undefined): node is estree.Literal;
export declare function isLogicalExpression(node: estree.Node | undefined): node is estree.LogicalExpression;
export declare function isMemberExpression(node: estree.Node | undefined): node is estree.MemberExpression;
export declare function isModuleDeclaration(node: estree.Node | undefined): node is estree.ModuleDeclaration;
export declare function isObjectExpression(node: estree.Node | undefined): node is estree.ObjectExpression;
export declare function isReturnStatement(node: estree.Node | undefined): node is estree.ReturnStatement;
export declare function isThrowStatement(node: estree.Node | undefined): node is estree.ThrowStatement;
export declare function isVariableDeclaration(node: estree.Node | undefined): node is estree.VariableDeclaration;
